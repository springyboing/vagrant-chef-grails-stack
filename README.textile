h1. Chef Application Cookbook Showcase

This "Vagrant":http://vagrantup.com project showcases the "application cookbook for
chef":http://www.opscode.com/blog/2010/05/06/data-driven-application-deployment-with-chef/

h2. Data Driven Java Application Deployment

The application cookbook helps to install a full application stack for java web applications. It abstracts the
installation of apache, tomcat and mysql to be modeled through a data driven concept.

At the core of this concept is the description of the application dependencies with json data. In this showcase we
deploy the application "probe" to a tomcat6 container behind a apache2 reverse_proxy.

the configuration can be found in databags/apps/java_app.json

It defines the server name and alias, the war and container context as well as the database to use.

h2. Chef-Solo Tweaks

Databags and Chef-Search are ment to be used with chef client. The application cookbook makes heavy use of this
chef features. To be able to use it in a vagrant/chef-solo environment some tweaks are necessary.

To tell Vagrant about the databags we have have to add this monkeypatch: "Vagrant_monkeypatch.rb":https://gist.github.com/867958
Chef solo still does not know how to read the databags from file and how to search and save without a server. This is done with
cookbooks/vagrant/libraries/chef_solo_databag_patch.rb which is extended from "chef_solo_patch.rb":https://gist.github.com/867960

save does nothing at the moment. It "works" for demonstration/development purposes.
search is rather dumb at the moment.

h2. Run it

Download the archive or to a git clone. Ensure that you have a proper Vagrant environment installed.
Change to the "vagrant-java-application" directory and enter

$ vagrant up

This will download the lucid32 box (500 MB so this can take a while on the first download) and do the provisioning

after the chef-solo run you can access "http://java_app.smackaho.st:4567/probe/":http://java_app.smackaho.st:4567/probe/ with the username "probe" and the password "probe"
this hits the application through apache. "http://java_app.smackaho.st:4568/probe/":http://java_app.smackaho.st:4568/probe/ will hit tomcat directly.

To prove the jdbc connection go to "http://java_app.smackaho.st:4567/probe/sql/datasourcetest.htm?webapp=/probe&resource=jdbc/java_app":http://java_app.smackaho.st:4567/probe/sql/datasourcetest.htm?webapp=/probe&resource=jdbc/java_app
